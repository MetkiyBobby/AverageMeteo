#! python3
# Программа для подсчета среднесуточных и среднемесячных значений и не только
# метеовеличин по данным АМК

"""
Общий план:
1. Программа должна принимать данные наблюдений с АМК
2. Программа должна рассчитывать среднюю температуру воздуха по суткам
и за месяц
3. Программа должна выводить результаты расчета в удобной форме
"""

"""
План реализации:
1. Создать команду получающую данные 
2. Создать регулярное выражение для поиска в тексте строк содержащих данные
наблюдений АМК. Причем только данные в начале каждого из 24 часов в сутках.
3. Создать список содержащий данные в формате ГГГГ-ММ-ДД ЧЧ Твозд
(приблизительно) с помощью методов модуля re
4. Создать функцию редактирующую дату и время наблюдений таким образом,
чтобы они соответствовали метеорологическим суткам и часовому поясу
UTC+3
5. Создать функцию которая будет подсчитывать среднесуточную температуру
6. Создать функцию которая будет подсчитывать среднемесячную температуру
7. Создать функцию которая будет выводить данные для пользователя
"""

import pyperclip  # импорт модуля pyperclip для работы с буфером обмена
import re # импорт модуля для работы с регулярными выражениями

initialData = pyperclip.paste() # вставка исходных данных из буфера обмена

def timeFiltering(data):
    """Функция принимает исходный текст и возвращает список содержащий
    только данные измерений в начале каждого часа"""
    
    amcDataRegex = re.compile(r'''
    (\d\d\d\d-\d\d-\d\d\s\d\d:00)    # ГГГГ-ММ-ДД ЧЧ:00, где 00 - минуты
    (:\d\d)                          # секунды
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # направление ветра
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # скорость ветра
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # порыв ветра
    (\s)                             # разделитель
    (-?\d+\.\d+|None)                # температура точки росы
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # относительная влажность
    (\s)                             # разделитель
    (-?\d+\.\d+|None)                # температура воздуха
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # атмосферное давление
    (\s)                             # разделитель
    (-?\d+\.\d+|None)                # тенденция
    ''',re.X)
    data = amcDataRegex.findall(initialData)

    return data

def temperatureFiltering(data):
    """Функция принимает данные возвращаемые функцией timeFiltering и
    возвращает список содержащий только данные измерений температуры"""
    temperatureList = []
    for i in data:
        string = (i[0] + ';' + i[13])
        temperatureList.append(string)

    return temperatureList

def calendarIntoMeteo(data):
    """Функция принимает список измерений с датами по календарным суткам
    и возвращает список с датами по метеорологическим суткам (следующие
    метеорологические сутки начинаются в 15:00 ВСВ)"""
    lastDayOfMonth = ('01-31', '02-28', '02-29', '03-31', '04-30', '05-31',
                      '06-30', '07-31', '08-31', '09-30', '10-31', '11-30',
                      '12-31') # список содержащий последние даты месяцев
    listOfTerms = list(range(15, 24)) # список содержащий часы, которые
                                      # относятся к следующим суткам
    meteo_list = [] # список содержащий даты по метеорологическим суткам
    for i in data:  # перебираются все элементы исходного списка
        if int(i[11:13]) in listOfTerms:
            # если срез текущего элемента, содержащий значение часа
            # есть в списке относится к срокам переносимым на следующие
            # сутки
            calendarDay = int(i[8:10]) # срез содержащий значение
                                       # календарного дня
            calendarMonth = int(i[5:7])# срез содержащий значение
                                       # календарного месяца
            meteoDay = str(calendarDay + 1) # значение метеорологических
                                            # суток
            meteoMonth = str(calendarMonth + 1) # значение метеорологического
                                                # месяца
            if calendarDay < 9: 
                meteo_list.append(i[:8] + '0' + meteoDay + i[10:])
            elif i[5:10] in lastDayOfMonth: # если срез содержащий значение
                                            # календарного месяца содержится
                                            # в списке последних дат месяцев
                if calendarMonth < 9:
                    meteo_list.append(i[:5] + '0' + meteoMonth + '-01' +
                                    i[10:])
                else:
                    meteo_list.append(i[:5] + meteoMonth + '-01' + i[10:])
            else:
                meteo_list.append(i[:8] + meteoDay + i[10:])
        else:
            meteo_list.append(i)
               
    return meteo_list


def dataByDay(data):
    """Функция принимает список измерений и возвращает словарь в качестве
    ключей в котором используются даты, а в качестве значений списки из
    строк содержащих данные измерений произведенных в этот день."""
    days = {}
    for i in data: # перебираются все элементы исходного списка,
                   # т.е. данные всех наблюдений с интервалом 1 час
       
        thisDayList = []# во время каждой итерации создается список,
                        # который должен содержать данные наблюдений
                        # произведенные за все часы одних суток (т.е.,
                        # если ряд полный, 24 строки с данными) 
        for j in data:  # во время каждой итерации первого цикла for
                        # производится еще один перебор всех элементов
                        # исходного списка.
            if i[0:10] in j[0:10]: # с помощью среза из элемента первого
                                   # цикла for берется дата и проверяется
                                   # совпадает ли она с датой элемента из
                                   # вложенного цикла for и если True:
                ind = (j.index(';') + 1) # находится индекс знака ; элемента
                                         # вложенного цикла for, чтобы
                                         # отделить часть строки содержащую
                                         # дату
                thisDayList.append(j[ind:]) # список содержащий данные наб-
                                            # людений за этот день пополня-
                                            # ется срезом элемента вложенн-
                                            # ого цикла for без даты
            days.setdefault(i[0:10], thisDayList) # так как в исходном цикле
                                                  # for дата повторяется
                                                  # много раз в словарь эта
                                                  # дата добавляется только
                                                  # первый раз, как и соот-
                                                  # ветствующий список
                                                  # thisDayList
    return(days)

def dataByMonth(data):
    """Функция принимает список измерений и возвращает словарь в качестве
    ключей в котором используются месяцы, а в качестве значений списки из
    строк содержащих данные измерений произведенных в этот месяц."""
    months = {}
    for i in data: # перебираются все элементы исходного списка,
                   # т.е. данные всех наблюдений с интервалом 1 час
       
        thisMonthList = []# во время каждой итерации создается список,
                        # который должен содержать данные наблюдений
                        # произведенные за все сроки каждого дня месяца
        for j in data:  # во время каждой итерации первого цикла for
                        # производится еще один перебор всех элементов
                        # исходного списка.
            if i[0:7] in j[0:7]: # с помощью среза из элемента первого
                                   # цикла for берется дата и проверяется
                                   # совпадает ли она с датой элемента из
                                   # вложенного цикла for и если True:
                ind = (j.index(';') + 1) # находится индекс знака ; элемента
                                         # вложенного цикла for, чтобы
                                         # отделить часть строки содержащую
                                         # дату
                thisMonthList.append(j[ind:]) # список содержащий данные наб-
                                            # людений за этот день пополня-
                                            # ется срезом элемента вложенн-
                                            # ого цикла for без даты
            months.setdefault(i[0:7], thisMonthList) # так как в исходном цикле
                                                  # for дата повторяется
                                                  # много раз в словарь эта
                                                  # дата добавляется только
                                                  # первый раз, как и соот-
                                                  # ветствующий список
                                                  # thisDayList
    return(months)
