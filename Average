#! python3
# Программа для подсчета среднесуточных и среднемесячных значений и не только
# метеовеличин по данным АМК

import pyperclip  # импорт модуля pyperclip для работы с буфером обмена
import re # импорт модуля для работы с регулярными выражениями
import os # импорт модуля для работы с файлами и путями

def timeFiltering(data):
    """Функция принимает исходный текст и возвращает список содержащий
    только данные измерений в начале каждого часа"""
    
    amcDataRegex = re.compile(r'''
    (\d\d\d\d-\d\d-\d\d\s\d\d:00)    # ГГГГ-ММ-ДД ЧЧ:00, где 00 - минуты
    (:\d\d)                          # секунды
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # направление ветра
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # скорость ветра
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # порыв ветра
    (\s)                             # разделитель
    (-?\d+\.\d+|None)                # температура точки росы
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # относительная влажность
    (\s)                             # разделитель
    (-?\d+\.\d+|None)                # температура воздуха
    (\s)                             # разделитель
    (\d+\.\d+|None)                  # атмосферное давление
    (\s)                             # разделитель
    (-?\d+\.\d+|None)                # тенденция
    ''',re.X)
    data = amcDataRegex.findall(data)

    return data

def temperatureFiltering(data):
    """Функция принимает данные возвращаемые функцией timeFiltering и
    возвращает список содержащий только данные измерений температуры"""
    temperatureList = []
    for i in data:
        if re.match(r'-?\d+\.\d+', i[13]) != None:
            string = (i[0] + ';' + i[13])
            temperatureList.append(string)

    return temperatureList

def calendarIntoMeteo(data):
    """Функция принимает список измерений с датами по календарным суткам
    и возвращает список с датами по метеорологическим суткам (следующие
    метеорологические сутки начинаются в 15:00 ВСВ)"""
    lastDayOfMonth = ('01-31', '02-28', '02-29', '03-31', '04-30', '05-31',
                      '06-30', '07-31', '08-31', '09-30', '10-31', '11-30',
                      '12-31')
    listOfTerms = list(range(15, 24)) # список содержащий часы, которые
                                      # относятся к следующим суткам
    meteo_list = [] # список содержащий даты по метеорологическим суткам
    for i in data:
        if int(i[11:13]) in listOfTerms:
            # если срез текущего элемента, содержащий значение часа
            # есть в списке тех, что относятся к следующим суткам
            calendarDay = int(i[8:10]) 
            calendarMonth = int(i[5:7])
            meteoDay = str(calendarDay + 1) # значение метеорологических
                                            # суток
            meteoMonth = str(calendarMonth + 1) # значение метеорологического
                                                # месяца
            if calendarDay < 9: 
                meteo_list.append(i[:8] + '0' + meteoDay + i[10:])
            elif i[5:10] in lastDayOfMonth: 
                if calendarMonth < 9:
                    meteo_list.append(i[:5] + '0' + meteoMonth + '-01' +
                                    i[10:])
                else:
                    meteo_list.append(i[:5] + meteoMonth + '-01' + i[10:])
            else:
                meteo_list.append(i[:8] + meteoDay + i[10:])
        else:
            meteo_list.append(i)
               
    return meteo_list


def dataByDay(data):
    """Функция принимает список измерений и возвращает словарь в качестве
    ключей в котором используются даты, а в качестве значений списки из
    строк содержащих данные измерений произведенных в этот день."""
    days = {}
    for i in data:        
        thisDayList = []# во время каждой итерации создается список,
                        # который должен содержать данные наблюдений
                        # произведенные за все часы одних суток 
        for j in data:  # во время каждой итерации первого цикла for
                        # производится еще один перебор всех элементов
                        # исходного списка.
            if i[0:10] in j[0:10]: # с помощью среза из элемента первого
                                   # цикла for берется дата и проверяется
                                   # совпадает ли она с датой элемента из
                                   # вложенного цикла for и если True:
                ind = (j.index(';') + 1) # находится индекс знака ; элемента
                                         # вложенного цикла for, чтобы
                                         # отделить часть строки содержащую
                                         # температуру                          
                thisDayList.append(float(j[ind:])) 
            days.setdefault(i[0:10], thisDayList) # так как в исходном цикле
                                                  # for дата повторяется
                                                  # много раз в словарь эта
                                                  # дата добавляется только
                                                  # первый раз, как и соот-
                                                  # ветствующий список
                                                  # thisDayList
    return(days)

def dataByMonth(data):
    """Функция принимает список измерений и возвращает словарь в качестве
    ключей в котором используются месяцы, а в качестве значений списки из
    строк содержащих данные измерений произведенных в этот месяц."""
    months = {}
    for i in data:        
        thisMonthList = []# во время каждой итерации создается список,
                        # который должен содержать данные наблюдений
                        # произведенные за все сроки каждого дня месяца
        for j in data:  # во время каждой итерации первого цикла for
                        # производится еще один перебор всех элементов
                        # исходного списка.
            if i[0:7] in j[0:7]: # с помощью среза из элемента первого
                                   # цикла for берется дата и проверяется
                                   # совпадает ли она с датой элемента из
                                   # вложенного цикла for и если True:
                ind = (j.index(';') + 1) # находится индекс знака ; элемента
                                         # вложенного цикла for, чтобы
                                         # отделить часть строки содержащую
                                         # температуру
                thisMonthList.append(float(j[ind:]))
            months.setdefault(i[0:7], thisMonthList)# так как в исходном цикле
                                                  # for дата повторяется
                                                  # много раз в словарь эта
                                                  # дата добавляется только
                                                  # первый раз, как и соот-
                                                  # ветствующий список
                                                  # thisDayList
    return(months)

def average(data, period):
    """Функция принимает словарь возвращаемый функцией dataByDay
    или dataByMonth и выводит на экран средние арифметические значения
    выбранной метеовеличины за каждый день или месяц"""
    print()
    print(('СРЕДНЯЯ ТЕМПЕРАТУРА ПО ' + period).center(50, '='))  
    for key, value in data.items():
        print(key + ';' +
             (str(round(sum(value)/len(value),2))).rjust(10, ' ')+
              '; Расчет произведен по ' + str(len(value)) + ' значениям')
        
    print()

def calculation(period, filePath):
    file = open(filePath)
    fileForRegex = file.read()
    data = fileForRegex 
    data = timeFiltering(data)
    data = temperatureFiltering(data)
    data = calendarIntoMeteo(data)
    if period == 'СУТКАМ':
        data = dataByDay(data)
    else:
        data = dataByMonth(data)
    data = average(data, period)

def choiceOfStation():
    stationNumber = 3 # переменной присваивается неиспользуемое значение
    filePath = None
    while not(stationNumber in list(range(1, 3))):
        print()
        print('Посчитать среднюю температуру для станции Коробово(1)' +
              ' или для станции Яршево(2)?\n(наберите на клавиатуре' +
              ' соответствующую цифру и нажмите клавишу \'ENTER\'):')
        try:
            stationNumber = int(input())
        except ValueError:
            print('Необходимо ввести цифру 1 или 2')
            continue
        if stationNumber not in list(range(1, 3)):
            print('Необходимо ввести цифру 1 или 2')
        if stationNumber == 1:
            filePath = 'C:\\Synop\\ПРОГНОЗ\\Коробово.txt'            
        elif stationNumber == 2:
            filePath = 'C:\\Synop\\ПРОГНОЗ\\Яршево.txt'
    return filePath

def choiceOfPeriod():
    periodNumber = 3 # переменной присваивается неиспользуемое значение
    period = None
    while not(periodNumber in list(range(1, 3))):
        print()
        print('Посчитать среднюю температуру по месяцам(1) или' +
                  ' по суткам(2)?\n(наберите на клавиатуре соответствующую' +
                  ' цифру и нажмите клавишу \'ENTER\'):')
        try:
            periodNumber = int(input())
        except ValueError:
            print('Необходимо ввести цифру 1 или 2')
            continue
        if periodNumber not in list(range(1, 3)):
            print('Необходимо ввести цифру 1 или 2')
        if periodNumber == 1:
            period = 'МЕСЯЦАМ'
        elif periodNumber == 2:
            period = 'СУТКАМ'
    return period

def menu():
    while True:
        print(('РАСЧЕТ СРЕДНИХ ЗНАЧЕНИЙ ТЕМПЕРАТУРЫ'
               ' ПО ДАННЫМ АМК').center(70, '='))
        filePath = choiceOfStation()
        if os.path.exists(filePath):        
            period = choiceOfPeriod()        
            calculation(period, filePath)
        else:
            print('Файл не найден. Проверьте присутствуют ли в папке' +
                  ' \'ПРОГНОЗ\'\nфайлы \'Коробово.txt\' и \'Яршево.txt\'' +
                  '\n(Возможно один из них удален или переименован)')
        print('Для продолжения нажмите клавишу \'ENTER\'')
        pause = input()
       
menu()    
